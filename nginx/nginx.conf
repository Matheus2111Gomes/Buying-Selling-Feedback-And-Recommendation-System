worker_processes  1;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    # Define the upstream backend server
    upstream backend {
        server backend_app:3000;  # Adjust the port and hostname to your backend service
    }

    server {
        listen 80;

        server_name your-domain.com;  # Replace with your domain or IP

        # Handle static files
        location /static/ {
            root /var/www/html;  # Adjust the root to your static files location
        }

        # Authentication endpoint (example)
        location /auth {
            proxy_pass http://auth_server:4000;  # Adjust to your authentication server
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Main application requests
        location / {
            # Check if the request has a valid JWT token
            auth_request /auth;  # This sends a subrequest to /auth

            # Handle failed authentication
            error_page 401 = @error401;

            # Proxy the main requests to the backend application
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Custom error page for unauthorized access
        location @error401 {
            return 401 'Unauthorized';
            add_header Content-Type text/plain;
        }

        # Logging configuration (optional)
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;
    }
}