service: recommendation-feedback

provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
    S3_BUCKET: ${self:service}-${self:provider.stage}
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 's3:PutObject'
        - 's3:GetObject'
        - 's3:DeleteObject'
      Resource: 'arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*'
    - Effect: 'Allow'
      Action:
        - 'dynamodb:PutItem'
        - 'dynamodb:Scan'
        - 'dynamodb:Query'
        - 'dynamodb:GetItem'
        - 'dynamodb:UpdateItem'
      Resource:
        - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}'
        - 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}/index/GSI-Product'
    - Effect: 'Allow'
      Action:
        - 'sqs:SendMessage'
        - 'sqs:ReceiveMessage'
        - 'sqs:DeleteMessage'
      Resource: 'arn:aws:sqs:${self:provider.region}:*:QueueName'

plugins:
  - serverless-esbuild

package:
  individually: true
  exclude:
    - node_modules/**
    - .serverless/**
    - .git/**
build:
  esbuild: false
custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude:
      - '@nestjs/microservices'
      - '@nestjs/websockets'
      - 'class-transformer'
      - 'class-validator'
    target: 'node16'
    define:
      'require.resolve': undefined
    platform: 'node'
    concurrency: 10

functions:
  #  createFeedback:
  #    handler: src/feedback/createFeedback.handler
  #    events:
  #      - http:
  #          path: feedback
  #          method: post
  #          cors: true
  #
  #  listFeedback:
  #    handler: src/feedback/listFeedback.handler
  #    events:
  #      - http:
  #          path: feedback
  #          method: get
  #          cors: true

  createUser:
    handler: src/user/handler/createUser.handler
    environment:
      DYNAMODB_TABLE: ${self:provider.environment.DYNAMODB_TABLE}
    events:
      - http:
          path: user
          method: post
          cors: true
    timeout: 20

  login:
    handler: src/auth/handler/login.handler
    environment:
      DYNAMODB_TABLE: ${self:provider.environment.DYNAMODB_TABLE}
    events:
      - http:
          path: auth/login
          method: post
          cors: true
    timeout: 20

  createProduct:
    handler: src/product/handler/createProduct.handler
    environment:
      DYNAMODB_TABLE: ${self:provider.environment.DYNAMODB_TABLE}
    events:
      - http:
          path: product
          method: post
          cors: true
    timeout: 20

  listProducts:
    handler: src/product/handler/listProducts.handler
    environment:
      DYNAMODB_TABLE: ${self:provider.environment.DYNAMODB_TABLE}
    events:
      - http:
          path: product
          method: get
          cors: true
    timeout: 20

  getProduct:
    handler: src/product/handler/getProduct.handler
    environment:
      DYNAMODB_TABLE: ${self:provider.environment.DYNAMODB_TABLE}
    events:
      - http:
          path: product/{id}
          method: get
          cors: true
    timeout: 20

resources:
  Resources:
    ProductTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
